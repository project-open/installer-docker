]project-open[ Installer
========================

This is a cheat sheet for Docker commands needed
to create the ]po[ environment


]po[ Operations
---------------

Run PostgreSQL "psql" to access the database:
	docker exec -it installer-docker-postgres-1 psql -U projop openacs

Access ]po[ shell:
	docker exec -it project-open-v52-projop-1 /bin/bash



Docker Compose
--------------

Docker installation:
	apm install docker
	apt install docker-compose-v2

Basic operation:
	docker compose build --no-cache (re-create from scratch)
	docker compose up
	docker compose -f filename.yaml up
	docker compose down
	docker compose logs
	docker compose ps/ls

Cleanup:
	docker compose down
	docker builder prune -f
	docker image rm project-open-v52-projop -f
	docker image rm	installer-docker-projop -f
	docker image rm	postgres -f
	docker volume rm project-open-v52_db_data
	docker volume rm project-open-v52_oacs_data
	docker image prune -f



Naviserver Image
================

Debugging:
	docker exec -it installer-docker-projop-1 /bin/bash	# Run bash in container
	docker top installer-docker-projop-1	  		# List processes in VM
	docker ps --all						# Check for stopped containers
	docker network ls					# Show network
	docker logs installer-docker-projop-1
	docker stats installer-docker-projop-1
	
Copy file from VM to host:
	docker cp <containerId>:/file/path/within/container /host/path/target
	docker cp installer-docker-projop-1:/scripts/container-setup-openacs.sh .
	docker cp packages/acs-tcl/tcl/utilities-procs.tcl installer-docker-projop-1:/var/www/openacs/packages/acs-tcl/tcl/



PostgreSQL Image
================

Run PostgreSQL in the background directly on the host:
	docker run --net=host --name mypg -e POSTGRES_PASSWORD=secret -d postgres

With port mapped:
	docker run -d -p 5432:5432 --name mypg -e POSTGRES_PASSWORD=secret postgres

Create user and database "projop":
	docker run -d -p 5432:5432 --name mypg -e POSTGRES_USER=projop -e POSTGRES_PASSWORD=projop -e POSTGRES_DB=projop postgres

Run psql in a second docker image:
    	docker run -it --rm --network some-network postgres psql -h mypg -U postgres



NGINX Image
===========

docker pull nginx:latest
docker run --name mynginx -d -p 80:80 nginx
ufw allow 80/tcp



Dockerfile
==========

Simple dockerfile to launch a program ("ab")

FROM ubuntu:latest
RUN apt-get update &amp;&amp; \
    apt-get install -y apache2-utils &amp;&amp; \
    rm -rf /var/lib/apt/lists/*
CMD ab

To build the image use:
   	docker build -t ab .
To run, the 2nd "ab" overrides the CMD:	
	docker run ab ab http://test.com/


Use instead of CMD the following:
ENTRYPOINT ["ab"]
Now to run the ab command with parameter:
       docker run ab http://bencane.com/



# ----------------------------------------------------------------
# Submodules

# New clone of packages directory 
git clone https://gitlab.project-open.net/project-open/packages.git
git switch cust-cosine
git submodule update --recursive --init

# Deploy pre-commit hook into all submodules
cd ~/packages/; git submodule foreach 'cp ~/packages/tools/pre-commit ~/packages/.git/modules/$name/hooks/'
cd ~/packages/; git submodule foreach 'chmod ug+x ~/packages/.git/modules/$name/hooks/pre-commit'

# Add a new submodule
git clone https://gitlab.project-open.net/project-open/upgrade-5.0-5.1.git


# ----------------------------------------------------------------
# General

# Undo last commit
git reset HEAD~

[cosine@project-open-v50 tools]$ clear; cat cli.txt

# Reference of some more complex command line instructions
# Frank Bergmann (frank.bergmann@project-open.com)


# ----------------------------------------------------------------
# Submodules

# New clone of packages directory 
git clone https://gitlab.project-open.net/project-open/packages.git
git switch cust-cosine
git submodule update --recursive --init

# Deploy pre-commit hook into all submodules
cd ~/packages/; git submodule foreach 'cp ~/packages/tools/pre-commit ~/packages/.git/modules/$name/hooks/'
cd ~/packages/; git submodule foreach 'chmod ug+x ~/packages/.git/modules/$name/hooks/pre-commit'

# Add a new submodule
git clone https://gitlab.project-open.net/project-open/upgrade-5.0-5.1.git


# ----------------------------------------------------------------
# General

# Undo last commit
git reset HEAD~



# ----------------------------------------------------------------
# From history:

clear; docker compose up 
docker cp project-open-v52-postgres-1:/tmp/pg_dump.afterinstall.sql .
docker cp project-open-v52-projop-1:/usr/local/ns.tgz .
docker cp project-open-v52-projop-1:/usr/local/ns/conf/openacs-config.tcl .
docker cp project-open-v52-projop-1:/var/www/openacs/etc/config.tcl .
docker exec -it /bin/bash root-naviserver-1
docker exec -it /bin/sh root-naviserver-1
docker exec -it 3cdffc0489f5 /bin/bash
docker exec -it mynginx bash
docker exec -it mynginx bash -c "pwd"
docker exec -it mynginx sh -c "pwd"
docker exec -it project-open-v52-postgres-1 /bin/bash
docker exec -it project-open-v52-projop-1 /bin/bash
docker exec -it root-naviserver-1 /usr/bin/find 
docker image delete postgres:latest
docker image load gustafn/openacs
docker image ls
docker image prune
docker image rm gustafn/naviserver
docker image rm hello-world
docker image rm postgres:latest
docker image save gustafn/naviserver-pg -o naviserver-ng.tar
docker ps
docker ps --all
docker pull gustafn/naviserver-pg
docker pull nginx
docker pull nginx:latest
docker pull postgres
docker run --name mynginx -d -p 80:80 nginx
docker run --name mypg -e POSTGRES_PASSWORD=secret -d postgres
docker run --name pg -e POSTGRES_PASSWORD=secret -d postgres
docker run --name pg -e POSTGRES_PASSWORD=secret -d postgres
docker run --net=host --name myns gustafn/naviserver-pg
docker run --net=host --name myns naviserver-pg
docker run --net=host --name mypg -e POSTGRES_PASSWORD=secret -d postgres
docker run --net=host mypg
docker run --net=host postgres
docker run --rm -it --name myns bash
docker run --rm -it myns bash
docker run -d --net=host --name myns gustafn/naviserver-pg
docker run -d --net=host -p 5432:5432 --name mypg -e POSTGRES_PASSWORD=secret postgres
docker run -d -p 5432:5432 --name mypg -e POSTGRES_PASSWORD=secret postgres
docker run -d -p 5432:5432 --name mypg -e POSTGRES_USER=projop -e POSTGRES_PASSWORD=projop -e POSTGRES_DB=projop postgres
docker run -it --rm --network host postgres psql
docker run -it --rm --network host postgres psql -h localhost
docker run -it --rm --network host postgres psql -h mypg -U postgres
docker run -it --rm --network host postgres psql -h some-postgres -U postgres
docker run -it --rm --network some-network postgres psql -h mypg -U postgres
docker run -it --rm --network some-network postgres psql -h some-postgres -U postgres
docker run -it jolly_taussig /bin/bash
docker run project-open-v52-projop-1
docker start project-open-v52-postgres-1
docker start project-open-v52-projop-1
docker status
docker stop project-open-v52-postgres-1
docker stop project-open-v52-projop-1 
